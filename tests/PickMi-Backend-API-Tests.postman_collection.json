{
	"info": {
		"_postman_id": "pickmi-backend-api-tests",
		"name": "PickMi Backend API Tests",
		"description": "Comprehensive API test collection for PickMi Backend - Anonymous note-throwing web application",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "üîê Authentication",
			"item": [
				{
					"name": "User Sign Up - Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has success message\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.message).to.eql(\"User created successfully. Please sign in.\");",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{test_user_email}}\",\n    \"password\": \"{{test_user_password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/signup",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"signup"
							]
						}
					}
				},
				{
					"name": "User Sign Up - Duplicate Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"pm.test(\"Error type is CONFLICT_ERROR\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.error.type).to.eql(\"CONFLICT_ERROR\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{test_user_email}}\",\n    \"password\": \"{{test_user_password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/signup",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"signup"
							]
						}
					}
				},
				{
					"name": "User Sign Up - Invalid Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error type is VALIDATION_ERROR\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.error.type).to.eql(\"VALIDATION_ERROR\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"invalid-email\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/signup",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"signup"
							]
						}
					}
				},
				{
					"name": "User Sign In - Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains token\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('token');",
									"    pm.expect(responseJson.token).to.be.a('string');",
									"    ",
									"    // Store token for other requests",
									"    pm.environment.set('auth_token', responseJson.token);",
									"});",
									"",
									"pm.test(\"Token is JWT format\", function () {",
									"    const responseJson = pm.response.json();",
									"    const token = responseJson.token;",
									"    const tokenParts = token.split('.');",
									"    pm.expect(tokenParts).to.have.lengthOf(3);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{test_user_email}}\",\n    \"password\": \"{{test_user_password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/signin",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"signin"
							]
						}
					}
				},
				{
					"name": "Admin Sign Up",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has success message\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.message).to.eql(\"User created successfully. Please sign in.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{admin_email}}\",\n    \"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/signup",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"signup"
							]
						}
					}
				},
				{
					"name": "Admin Sign In",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains token\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('token');",
									"    pm.expect(responseJson.token).to.be.a('string');",
									"    ",
									"    // Store admin token",
									"    pm.environment.set('admin_token', responseJson.token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{admin_email}}\",\n    \"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/signin",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"signin"
							]
						}
					}
				},
				{
					"name": "User Sign In - Invalid Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Error type is AUTHENTICATION_ERROR\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.error.type).to.eql(\"AUTHENTICATION_ERROR\");",
									"    pm.expect(responseJson.error.message).to.eql(\"Invalid credentials\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{test_user_email}}\",\n    \"password\": \"wrong_password\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/signin",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"signin"
							]
						}
					}
				},
				{
					"name": "Forgot Password - Valid Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success message\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.message).to.include(\"password reset link has been sent\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{test_user_email}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/forgot-password",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"forgot-password"
							]
						}
					}
				},
				{
					"name": "Reset Password - Invalid Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error type is VALIDATION_ERROR\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.error.type).to.eql(\"VALIDATION_ERROR\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"invalid_token_123\",\n    \"newPassword\": \"NewPassword123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/reset-password",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"reset-password"
							]
						}
					}
				},
				{
					"name": "Delete Account - Valid Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success message\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.message).to.eql(\"Account deleted successfully.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"password\": \"{{test_user_password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/me",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"me"
							]
						}
					}
				}
			]
		},
		{
			"name": "üìù Notes",
			"item": [
				{
					"name": "Create Note - Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains note ID and success message\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('id');",
									"    pm.expect(responseJson.message).to.eql(\"Note thrown successfully!\");",
									"    ",
									"    // Store note ID for other tests",
									"    pm.environment.set('test_note_id', responseJson.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"{{test_note_title}}\",\n    \"content\": {\n        \"text\": \"{{test_note_content}}\",\n        \"drawingData\": null\n    },\n    \"location\": {\n        \"latitude\": {{test_latitude}},\n        \"longitude\": {{test_longitude}},\n        \"placeId\": \"{{test_place_id}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/notes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"notes"
							]
						}
					}
				},
				{
					"name": "Create Note - No Authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Error type is AUTHENTICATION_ERROR\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.error.type).to.eql(\"AUTHENTICATION_ERROR\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Test Note\",\n    \"content\": {\n        \"text\": \"This should fail without auth\"\n    },\n    \"location\": {\n        \"latitude\": 40.7128,\n        \"longitude\": -74.006\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/notes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"notes"
							]
						}
					}
				},
				{
					"name": "Create Note - Invalid Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error type is VALIDATION_ERROR\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.error.type).to.eql(\"VALIDATION_ERROR\");",
									"    pm.expect(responseJson.error.details).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"\",\n    \"content\": {\n        \"text\": \"\"\n    },\n    \"location\": {\n        \"latitude\": 200,\n        \"longitude\": -200\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/notes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"notes"
							]
						}
					}
				},
				{
					"name": "Get Nearby Notes - Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Each note has required properties\", function () {",
									"    const responseJson = pm.response.json();",
									"    if (responseJson.length > 0) {",
									"        responseJson.forEach(note => {",
									"            pm.expect(note).to.have.property('id');",
									"            pm.expect(note).to.have.property('location');",
									"            pm.expect(note.location).to.have.property('lat');",
									"            pm.expect(note.location).to.have.property('lon');",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/notes/nearby?lat={{test_latitude}}&lon={{test_longitude}}&radius=5000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"notes",
								"nearby"
							],
							"query": [
								{
									"key": "lat",
									"value": "{{test_latitude}}"
								},
								{
									"key": "lon",
									"value": "{{test_longitude}}"
								},
								{
									"key": "radius",
									"value": "5000"
								}
							]
						}
					}
				},
				{
					"name": "Get Specific Note - Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains note content\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('id');",
									"    pm.expect(responseJson).to.have.property('title');",
									"    pm.expect(responseJson).to.have.property('content');",
									"    pm.expect(responseJson.content).to.have.property('text');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/notes/{{test_note_id}}?lat={{test_latitude}}&lon={{test_longitude}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"notes",
								"{{test_note_id}}"
							],
							"query": [
								{
									"key": "lat",
									"value": "{{test_latitude}}"
								},
								{
									"key": "lon",
									"value": "{{test_longitude}}"
								}
							]
						}
					}
				},
				{
					"name": "Get Specific Note - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 or 422\", function () {",
									"    pm.expect([404, 422]).to.include(pm.response.code);",
									"});",
									"",
									"pm.test(\"Error response format is correct\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.error).to.have.property('type');",
									"    pm.expect(responseJson.error).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/notes/507f1f77bcf86cd799439011?lat={{test_latitude}}&lon={{test_longitude}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"notes",
								"507f1f77bcf86cd799439011"
							],
							"query": [
								{
									"key": "lat",
									"value": "{{test_latitude}}"
								},
								{
									"key": "lon",
									"value": "{{test_longitude}}"
								}
							]
						}
					}
				},
				{
					"name": "Delete Note - Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success message\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.message).to.eql(\"Note deleted successfully.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"latitude\": {{test_latitude}},\n    \"longitude\": {{test_longitude}}\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/notes/{{test_note_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"notes",
								"{{test_note_id}}"
							]
						}
					}
				}
			]
		},
		{
			"name": "üë®‚Äçüíº Admin",
			"item": [
				{
					"name": "Get All Users - Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array of users\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an('array');",
									"    ",
									"    if (responseJson.length > 0) {",
									"        responseJson.forEach(user => {",
									"            pm.expect(user).to.have.property('id');",
									"            pm.expect(user).to.have.property('email');",
									"            pm.expect(user).to.have.property('role');",
									"        });",
									"        ",
									"        // Store first user ID for other tests",
									"        pm.environment.set('test_user_id', responseJson[0].id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"users"
							]
						}
					}
				},
				{
					"name": "Get All Users - Non-Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Error type is FORBIDDEN_ERROR\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.error.type).to.eql(\"FORBIDDEN_ERROR\");",
									"    pm.expect(responseJson.error.message).to.include(\"Admin access required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"users"
							]
						}
					}
				},
				{
					"name": "Get All Notes - Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array of notes\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an('array');",
									"    ",
									"    if (responseJson.length > 0) {",
									"        responseJson.forEach(note => {",
									"            pm.expect(note).to.have.property('id');",
									"            pm.expect(note).to.have.property('userId');",
									"            pm.expect(note).to.have.property('title');",
									"            pm.expect(note).to.have.property('content');",
									"            pm.expect(note).to.have.property('location');",
									"        });",
									"        ",
									"        // Store first note ID for other tests",
									"        pm.environment.set('admin_test_note_id', responseJson[0].id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin/notes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"notes"
							]
						}
					}
				},
				{
					"name": "Get User by ID - Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains user data\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('id');",
									"    pm.expect(responseJson).to.have.property('email');",
									"    pm.expect(responseJson).to.have.property('role');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin/users/{{test_user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"users",
								"{{test_user_id}}"
							]
						}
					}
				},
				{
					"name": "Get Note by ID - Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains note content\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('id');",
									"    pm.expect(responseJson).to.have.property('content');",
									"    pm.expect(responseJson.content).to.have.property('text');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin/notes/{{admin_test_note_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"notes",
								"{{admin_test_note_id}}"
							]
						}
					}
				},
				{
					"name": "Get User Notes - Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin/users/{{test_user_id}}/notes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"users",
								"{{test_user_id}}",
								"notes"
							]
						}
					}
				},
				{
					"name": "Delete Note - Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success message\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.message).to.eql(\"Note deleted successfully.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin/notes/{{admin_test_note_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"notes",
								"{{admin_test_note_id}}"
							]
						}
					}
				},
				{
					"name": "Delete User - Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success message\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.message).to.eql(\"User and all associated data deleted successfully.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin/users/{{test_user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"users",
								"{{test_user_id}}"
							]
						}
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Generate unique test data for each run",
					"const timestamp = Date.now();",
					"pm.environment.set('timestamp', timestamp);",
					"",
					"// Generate unique email for testing",
					"if (!pm.environment.get('test_user_email') || pm.environment.get('test_user_email').includes('{{timestamp}}')) {",
					"    pm.environment.set('test_user_email', `testuser${timestamp}@example.com`);",
					"}",
					"",
					"if (!pm.environment.get('admin_email') || pm.environment.get('admin_email').includes('{{timestamp}}')) {",
					"    pm.environment.set('admin_email', `admin${timestamp}@example.com`);",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test to check response time",
					"pm.test(\"Response time is less than 5000ms\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"// Global test for content type on successful responses",
					"if (pm.response.code >= 200 && pm.response.code < 300) {",
					"    pm.test(\"Content-Type header is present\", function () {",
					"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
					"    });",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:3000",
			"type": "string"
		}
	]
}